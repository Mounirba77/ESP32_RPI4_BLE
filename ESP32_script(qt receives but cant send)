<#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLEServer *pServer = nullptr;
BLECharacteristic *pTxCharacteristic = nullptr;
BLECharacteristic *pRxCharacteristic = nullptr;
BLEDescriptor *pDescr_Tx;
BLEDescriptor *pDescr_Rx;
BLE2902 *pBLE2902_Tx;
BLE2902 *pBLE2902_Rx;
bool deviceConnected = false;
bool oldDeviceConnected = false;

#define SERVICE_UUID "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID_TX "beb5483e-36e1-4688-b7f5-ea07361b26a8"
#define CHARACTERISTIC_UUID_RX "6e400002-b5a3-f393-e0a9-e50e24dcca9e"

class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer *pServer) {
        deviceConnected = true;
        Serial.println("Client connected");
    }

    void onDisconnect(BLEServer *pServer) {
        deviceConnected = false;
        Serial.println("Client disconnected");
    }
};

class MyCallbacks : public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
        String receivedData = pCharacteristic->getValue();
        if (receivedData.length() > 0) {
            Serial.print("Received data: ");
            Serial.println(receivedData.c_str());
            
            // Example: Echo the received data back to the client
            pTxCharacteristic->setValue(receivedData);
            pTxCharacteristic->notify();
        }
    }
};

void setup() {
    Serial.begin(115200);
    BLEDevice::init("ESP32");

    // Create BLE Server
    pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    // Create BLE Service
    BLEService *pService = pServer->createService(SERVICE_UUID);

    // Create TX Characteristic
    pTxCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID_TX,
        BLECharacteristic::PROPERTY_NOTIFY
    );
    pDescr_Tx = new BLEDescriptor((uint16_t)0x2901);
    pTxCharacteristic->addDescriptor(pDescr_Tx);
    pBLE2902_Tx = new BLE2902();
    pBLE2902_Tx->setNotifications(true);
    pTxCharacteristic->addDescriptor(pBLE2902_Tx);

    // Create RX Characteristic
    pRxCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID_RX,
        BLECharacteristic::PROPERTY_READ   |
        BLECharacteristic::PROPERTY_WRITE  |                      
        BLECharacteristic::PROPERTY_NOTIFY 
    );
    pDescr_Rx = new BLEDescriptor((uint16_t)0x2902);
    pBLE2902_Rx = new BLE2902();
    pBLE2902_Rx->setNotifications(true);
    pRxCharacteristic->addDescriptor(pBLE2902_Rx);
    pRxCharacteristic->setCallbacks(new MyCallbacks());

    // Start the service
    pService->start();

    // Start advertising
    pServer->getAdvertising()->start();
    Serial.println("Waiting for a client connection...");
}

void loop() {
    // Monitor connection status
    if (deviceConnected) {
        // Simulate sending float data to the client
        float valueToSend = 42.42;
        //pTxCharacteristic->setValue((uint8_t *)&valueToSend, sizeof(valueToSend));
        pTxCharacteristic->setValue(valueToSend);
        pTxCharacteristic->notify();
        delay(1000); // Send every second
    }

    // Handle disconnection
    if (!deviceConnected && oldDeviceConnected) {
        delay(500);  // Wait before advertising again
        pServer->startAdvertising();
        Serial.println("Advertising restarted");
        oldDeviceConnected = deviceConnected;
    }

    oldDeviceConnected = deviceConnected;
}
